doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')

    title Genetic Algorithms and You
    link(rel='stylesheet', type='text/css', href='bower_components/reveal.js/css/reveal.min.css')
    link(rel='stylesheet', type='text/css', href='bower_components/reveal.js/css/theme/default.css')

  body
    div.reveal
      div.slides

        section
          h1 The Wow of Genetic Algorithms
          br
          h3 By Roey Chasman
          br
          img(src='styles/sciencedoge.jpg')

        section
          h2 What are they?
          ul
            li.fragment Genetic Algorithms (GAs) are algorithms that use Darwinian principles to reactively converge upon optimal solutions in their environment.
            br
            li.fragment Technical Definition: "A machine learning technique used to optimize a population of computer programs according to a fitness landscape determined by a program's ability to perform a given computational task."
            br
            li.fragment Sound complicated? GAs are easy to think about when we use metaphors from occurences in nature.

        section
          h2 Darwinian Theory
          br
          p.fragment "All species of organisms arise and develop through the natural selection of small, inherited variations that increase the individual's ability to compete, survive, and reproduce." - Wikipedia
          br
          p.fragment If we want to abstract this theory into code let's first drill down the concept.
          br
          ul
            li.fragment In nature, the process of evolution has no contextual knowledge. It's 'dumb'.
            li.fragment Various expressions of traits are selected to be passed on based on their results of a fitness ranking among the survivors.

        section
          h2 This is Life
          br
          ol.fragment
            li.fragment.grow We are born.
            li.fragment.grow We do stuff.
            li.fragment.grow We make babies.
            li.fragment.grow We die.
          div.fragment
            img(src='styles/what.gif')
            p.fragment GAs are implementions of life.

        section
          h2 Abstractions of Genetic Algorithms
          br
          p.fragment.grow.highlight-blue DNA and Genes
          br
          p.fragment.grow.highlight-red Actors
          br
          p.fragment.grow.highlight-green Populations

        section
          h2 Abstraction: DNA and Genes
          p.fragment 'Genes' are the metaphor for expressed traits in a problem space.
          p.fragment Collectively genes are referred to as 'DNA'
          br
          ul.fragment
            li GAs recombinate their genes inside of DNA to evolve.
            li DNA set's must be populated by thoughtful selections of traits.

        section
          h2 Abstraction: Actors
          p.fragment Actors what we call individuals within a population.
          br
          ul.fragment
            li An Actor's DNA is either inherited from their parents or random chance.
            li Actors are evaluated for fitness.
            li Actors breed. Some more than others.
            li Actors die..

        section
          h2 Abstraction: Populations
          p.fragment A Population is a discrete generation of actors.
          br
          ul.fragment
            li Populations have sizes.
            li Fixed or variable population sizes is an implementation choice.
            li A Population's generation size is a critical input to any GA.

        section
          h2 Specifics
          br
          p Remember how life works?
          br
          table(style='border-spacing: 60px 0px; margin: 0px auto;')
            tr
              td.fragment(data-fragment-index="1")
                li We are born.
              td.fragment.zoom-in(data-fragment-index="5")
                p I. Genesis
            tr
              td.fragment(data-fragment-index="2")
                li We do stuff.
              td.fragment.zoom-in(data-fragment-index="5")
                p II. Fitness
            tr
              td.fragment(data-fragment-index="3")
                li We make babies.
              td.fragment.zoom-in(data-fragment-index="5")
                p III. Reproduction
            tr
              td.fragment(data-fragment-index="4")
                li We die.
              td.fragment.zoom-in(data-fragment-index="5")
                p IV. Death
          br
          p.fragment Now lets implement it!

        section
          h2 Implementation - I. Genesis
          br
          p Seed your initial generation's DNA
          ul.fragment
            li Random?
            li Careful selection?
            li Smoothed Random?
          br
          br
          p.fragment Diversity is key!

        section
          h2 Genesis - Initial Seed
          canvas#alpha(data-processing-sources="scripts/actor.pde scripts/drawing.pde")
          br
          span
            button#pauser(onClick='pause()') Generate
            button(onClick='reset()') Reset

        section
          h2 Discussion - I. Genesis
          br
          p GAs work better and faster if an initial generation has greater variance in actor fitness.
          br
          p.fragment Why do you think this is?
          h4.fragment.roll-in Answer: The less varied the Genesis population is, the less options a population has to choose from. There are cases where the superior Gene can never be expressed because it has never existed in the population.
          br
          h4.fragment What is the consequence of this?
          p.fragment.roll-in Answer: The population will have a hard, if not impossible, time improving upon it's previous generations.

        section
          h2 Implementation - II. Fitness
          br
          p To evaluate each actor's fitness, you need two things:
          br
          h4.fragment Evaluation Function
          p.fragment The actor must be scored according to some external goal.
          p.fragment Audience: What are some examples of a possible function?
          br
          h4.fragment Normalization Function
          p.fragment The actor must be scored compared to his peers.
          p.fragment Linearly? Exponential? Logorithmic?

        section
          h2 Implementation - III. Breeding
          br
          h4.fragment Pool of Eligible Actors
          p.fragment Within the population determine some threshold for mating eligibility.
          p.fragment Maybe they all mate higher ranking Actors mate more?
          p.fragment Up to you!
          br
          h4.fragment Crossover
          p.fragment This is basically Meiosis. Given your n # of parents..
          p.fragment Determine a random cross over point in the list of expressed genes.
          p.fragment Gene subsets are contributed by the parents at crossover points.
          br
          h4.fragment Mutation
          p.fragment For each gene in the baby Actor randomly mutate the gene.
          p.fragment Set some probability for mutation in a Mutation Rate somewhere.

        section
          h2 Discussion - III. Breeding
          br
          p GAs optimize by favoring reproduction between Actors that have high fitness rankings .
          br
          h4.fragment Why would we introduce a chance that mutation could make our baby derpy?
          p.fragment.roll-in Answer: Remember how important variance is in a population. Based on environmental changes, in some cases that would be trash baby actually becomes the pick of the litter.
          img.fragment.roll-in(style='position: absolute; top: 20px; left: -200px; width: 200px;', src='styles/potato.jpg')
          br
          h4.fragment What is the consequence on a Population that has no Mutations?
          p.fragment.roll-in Answer: The population would have zero way to adapt to changes in the problem set after optimizing because genes for the correct solution are extinct.

        section
          h2 Implementation - IV. Death
          br
          h4 An end... And a new start.
          br
          p.fragment We've learned what we can from the now elderly population.
          p.fragment Send them off to the 'old folks home' (Garbage Collection)
          img(class='fragment zoom-in' src='styles/oldfolks.jpg')
          p.fragment Repeat from step II. with the new population.

        section
          h2 Conclusion
          br
          p Even with no actual analysis of the rules of the problem set, given enough variance and time, the GAs will eventually converge upon an approximate solution.
          br
          img(class='fragment zoom-in' src='styles/yeahscience.gif')
          p.fragment Discussion: Interesting modifications/use cases for Genetic Algorithms?

        section
          h2 Resources:
          br
          ol
            li <a href="https://github.com/allingeek/genetic-demo/blob/master/JeffnRpsCandidate.py">Example: Rock Paper Scissors Implementation</a>
            li <a href="http://www.blprnt.com/smartrockets/">Example: Smart Rockets</a>
            li <a href="http://boxcar2d.com/index.html">Example: 2D Cars</a>
            li <a href="http://multigrad.blogspot.com/2014/04/math-evolution-and-dirty-tricks.html">Fun: GA for finding Carmacks Quake III fast inverse square hack</a>
            li <a href="http://natureofcode.com/book/chapter-9-the-evolution-of-code/">Book: Nature of Code</a>
            li <a href="https://code.google.com/p/deap/">Library: DEAP</a>

        section
          h2 Thank You
          br
          p This code on <a href="http://www.github.com/rchasman/genetic-algorithm-presentation">Github</a>. Inspired by <a href="https://twitter.com/allingeek">Jeff Nickoloff's</a> talk.
          img(style='width: 500px;', src='styles/doge1.jpg')

    script(src='bower_components/reveal.js/js/reveal.js')
    script(src='bower_components/Processing.js/Processing.min.js')
    script(src='scripts/main.js')
